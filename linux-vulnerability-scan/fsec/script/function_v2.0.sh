#!/bin/bash
# 1. 진단 스크립트
# 1-1. 시스템 정보
RESULT=/root/$(hostname)"_scan_result_"$(date +%F).txt

# ANSI 색상 코드
GREEN='\033[32m'
RED='\033[31m'
SKY='\033[36m'
YELLOW='\033[33m'
RESET='\033[0m'

# 결과서 항목 구분을 위한 여백
SPACE(){
echo -e "" >> "$RESULT"
}

OK() {
  echo -e "${GREEN}[ 양호 ] : $*${RESET}" >> "$RESULT"
}

# WARN 메시지 출력
WARN() {
  echo -e "${RED}[ 취약 ] : $*${RESET}" >> "$RESULT"
}

BAR() {
echo "========================================================================"  >> "$RESULT"
}

# 취약점 진단 코드
CODE(){
echo -e "${SKY}$*${RESET}" >> "$RESULT"
}

# 취약점 조치 내용
SET(){
  echo -e "${YELLOW}[ 조치 ] : $*${RESET}" >> "$RESULT"
}

Set_InitScript_Info() {
{
  echo "
  **********************************************************************
  *                           리눅스 스크립트                          *
  **********************************************************************
    항목에 따라 시간이 다른 항목에 비하여 다소 오래 걸릴수 있습니다.
    조치 보고서는 hostname_scan_result_날짜.txt 파일로 /root에 저장 됩니다.
    기준은 [금융보안원 전자금융기반시설 기준] 문서입니다.
    참조 : https://guide.ncloud-docs.com/docs/ssc-ossecuritychecker
  **********************************************************************

  ############################# 시작 시간 ##############################
  $(date)

  ============================  시스템  정보 ===========================
  1. 시스템 기본 정보
     운영체제: $(grep -q PRETTY_NAME /etc/os-release | awk -F= '{print $2}' | tr -d '"')
     호스트 이름: $(uname -n)
     커널 버전: $(uname -r)

  2. 네트워크 정보
  $(ifconfig -a)

  ************************** 취약점 체크 시작 **************************
  "
} >> "$RESULT"
}

# Result Message
# 취약점 조치 완료 메시지
NO_RUN_MSG(){
  OK "$*" "서비스가 동작하지 않아 취약점 조치 제외"
}
FIX_MSG(){
  SET "$*" "취약점 조치 완료"
}
OPT_FIN_SKIP_FIX_MSG(){u
  OK "$*" "파일이 존재하지만 설정이 조건에 부합하여 취약점 조치 제외"
}
NO_FILE_SKIP_MSG(){
  OK "$*" "파일이 존재하지 않아 취약점 조치 제외"
}

# ********************************************* #
# SRV-001. SNMP Community 스트링 설정 미흡
SRV-001(){
BAR
CODE "[SRV-001] SNMP Community 스트링 설정 미흡"
cat << EOF >> "${RESULT}"
양호 : SNMP Community 이름이 public, private이 아닌 경우
취약 : SNMP Community 이름이 public, private인 경우
EOF
BAR

# pgrep : Process Grep
if ! pgrep -f snmp; then # 프로세스 동작 확인
  NO_RUN_MSG "snmp" # 관련 프로세스가 미동작 시 취약점 조치 제외
else
  FILE=/etc/snmp/snmpd.conf
  if [ -f "$FILE" ]; then # 설정 파일 존재 확인
    if [ "$(grep "com2sec" "$FILE" | awk '{print $4}')" == 'public' ]; then # 설정 파일 내용 확인
      sed -i "/^com2sec/ s/public/${USER_PASSWORD}/" $FILE
      $FIX_MSG $FILE # 취약점 조치 완료
    else
      OPT_FIN_SKIP_FIX_MSG $FILE # 파일은 존재하나 설정값에 이상이 없어 취약점 조치 제외
    fi
  else
    NO_FILE_SKIP_MSG $FILE # 프로세스는 동작하나 관련 파일이 없어 취약점 조치 제외
  fi
fi

echo "===== SRV-001 Finish ====="
SPACE
}

# ********************************************* #
# SRV-004. 불필요한 SMTP 서비스 실행
# SRV-005, 006, 007, 008, 009, 010 제외
SRV-004(){
BAR
CODE "[SRV-004] 불필요한 SMTP 서비스 실행"
cat << EOF >> "${RESULT}"
양호 : SMTP 서비스가 동작 중이지 않거나, 업무상 사용 중인 경우
취약 : 불필요한 SMTP 서비스가 동작 중인 경우
EOF
BAR

# Sendmail
if ! pgrep -f sendmail; then
  NO_RUN_MSG "sendmail"
else
  FILE=/etc/mail/sendmail.cf
  if [ ! -f "$FILE" ]; then
    FILE=/etc/sendmail.cf
  fi

  # grep -Ev '^(\s+| +)?\#|^\s+?$' "$FILE" : 주석과 빈 라인을 제외한 나머지 라인 출력
  # grep -q . : 출력된 결과 중 실제 텍스트가 포함된 라인이 있는지 확인, -q 옵션을 통해 결과 출력 X
  # 자사는 내부용 SMTP 서비스를 별도로 운영하고 있지 않아 파일 내부에 설정값이 존재하면 안 됨
  if [ -f "$FILE" ]; then # 설정 파일 존재 확인
    if grep -Ev '^(\s+| +)?\#|^\s+?$' "$FILE" | grep -q .; then
      sed -i 's/^/# /' "$FILE"
      FIX_MSG $FILE
    else
      OPT_FIN_SKIP_FIX_MSG $FILE
    fi
  else
    NO_FILE_SKIP_MSG $FILE
  fi
fi

# Postfix
if ! pgrep -f master; then
  NO_RUN_MSG "Postfix"
else
  FILE=/etc/postfix/main.cf
  if [ -f "$FILE" ]; then
    if grep -Ev '^(\s+| +)?\#|^\s+?$' "$FILE" | grep -q .; then
      sed -i 's/^/# /' "$FILE"
      FIX_MSG $FILE
    else
      OPT_FIN_SKIP_FIX_MSG $FILE
    fi
  else
    NO_FILE_SKIP_MSG $FILE
  fi

  # 다름 이름으로 저장된 경로 탐색
  if [ ! -f "$FILE" ]; then
    result=$(find /etc -type f -name 'main.cf' -print0 | xargs -0 grep -vE '^\s*\#|^\s*$')
    if [[ -n "$result" ]]; then
      find /etc -type f -name 'main.cf' -exec sed -i 's/^/# /' {} \;
      FIX_MSG "$(find /etc -type f -name 'main.cf')"
    else
      OPT_FIN_SKIP_FIX_MSG "$(find /etc -type f -name 'main.cf')"
    fi
  fi

  FILE=/etc/postfix/master.cf
  if [ -f "$FILE" ]; then
    if grep -Ev '^(\s+| +)?\#|^\s+?$' "$FILE" | grep -q .; then
      sed -i 's/^/# /' "$FILE"
      FIX_MSG $FILE
    else
      OPT_FIN_SKIP_FIX_MSG $FILE
    fi
  else
    NO_FILE_SKIP_MSG $FILE
  fi

  # 다름 이름으로 저장된 경로 탐색
  if [ ! -f "$FILE" ]; then
    result=$(find /etc -type f -name 'master.cf' -print0 | xargs -0 grep -vE '^\s*\#|^\s*$')
    if [[ -n "$result" ]]; then
      find /etc -type f -name 'master.cf' -exec sed -i 's/^/# /' {} \;
      FIX_MSG "$(find /etc -type f -name 'master.cf')"
    else
      NO_FILE_SKIP_MSG "다른 경로의 master.cf"
    fi
  fi
fi

# Exim4
if ! pgrep -f exim4; then
  NO_RUN_MSG "Exim4"
else
  FILE=/etc/exim4/exim4.conf
  if [ ! -f "$FILE" ]; then
    FILE=/var/lib/exim4/config.autogenerated
  fi

  if [ -f "$FILE" ]; then
    if grep -Ev '^(\s+| +)?\#|^\s+?$' "$FILE" | grep -q .; then
      sed -i 's/^/# /' "$FILE"
      FIX_MSG $FILE
    else
      OPT_FIN_SKIP_FIX_MSG $FILE
    fi
  else
    NO_FILE_SKIP_MSG $FILE
  fi
fi

echo "===== SRV-004 Finish ====="
SPACE
}

# ********************************************* #
# SRV-011. 시스템 관리자 계정의 FTP 사용 제한 미비
SRV-011(){
BAR
CODE "[SRV-011] 시스템 관리자 계정의 FTP 사용 제한 미비"
cat << EOF >> "${RESULT}"
양호 : ftpusers 파일이 존재하고 ftpusers 파일 안에 시스템 계정(root)이 존재할 경우
취약 : ftpusers 파일이 없거나, ftpusers 파일 안에 시스템 계정 미존재 혹은 주석처리 되어 있을 경우
EOF
BAR

if ! pgrep -f ftp; then
  NO_RUN_MSG "FTP"
else
  FILE="/etc/ftpusers"
  if [ ! -f "$FILE" ]; then
    FILE="/etc/ftpd/ftpusers"
  fi
  if [ ! -f "$FILE" ]; then
    FILE="/etc/proftpd/ftpusers"
  fi
  if [ ! -f "$FILE" ]; then
    FILE="/etc/vsftpd/ftpusers"
  fi
  if [ ! -f "$FILE" ]; then
    FILE="/etc/vsftpd/user_list"
  fi
  if [ ! -f "$FILE" ]; then
    FILE="/etc/vsftpd.ftpusers"
  fi
  if [ ! -f "$FILE" ]; then
    FILE="/etc/vsftpd.user_list"
  fi
  if [ ! -f "$FILE" ]; then
    FILE="/etc/ftpusers"
  fi

  if [ -f "$FILE" ]; then
    if ! grep -E '^[^#]*root' "$FILE"; then
      echo "root" >> "$FILE"
      FIX_MSG $FILE
    else
      OPT_FIN_SKIP_FIX_MSG $FILE
    fi
  else
    NO_FILE_SKIP_MSG $FILE
  fi
fi

echo "===== SRV-011 Finish ====="
SPACE
}

# ********************************************* #
# SRV-012. .netrc 파일 내 호스트 정보 노출
# .netrc는 특정 네트워크 프로토콜(예: FTP)을 사용하여 자동 로그인을 지원하기 위해 사용되는 구성 파일
SRV-012(){
BAR
CODE "[SRV-012] .netrc 파일 내 호스트 정보 노출"
cat << EOF >> "${RESULT}"
양호 : .netrc 파일 내부에 아이디, 패스워드 등 민감한 정보가 없는 경우
취약 : .netrc 파일 내부에 아이디, 패스워드 등 민감한 정보가 있는 경우
EOF
BAR

if ! pgrep -f ftp; then
  NO_RUN_MSG "FTP"
else
  if [ -n "$(find /home -type f -name '.netrc')" ]; then
    # ^\s*# : 줄의 시작부터 (^) 0개 이상의 공백 (\s*) 다음에 # 가 오는 패턴
    # ^\s*$ : 줄의 시작부터 끝까지 (^...$) 공백만 있거나 아무런 문자도 없는 패턴
    result="$(find /home -type f -name '.netrc' -print0 | xargs -0 -I{} sh -c 'ls -alL "{}" && cat "{}" | grep -Ev "^\s*#|^\s*$"')"
    if [ -n "$result" ]; then
      find /home -type f -name '.netrc' -print0 | xargs -0 -I{} sh -c 'ls -alL "{}" && > "{}" && FIX_MSG "{}"'
    else
      OPT_FIN_SKIP_FIX_MSG ".netrc"
    fi
  else
    NO_FILE_SKIP_MSG ".netrc"
  fi
fi

echo "===== SRV-012 Finish ====="
SPACE
}

# ********************************************* #
# SRV-013. Anonymous FTP 설정 활성화
SRV-013(){
BAR
CODE "[SRV-013] Anonymous FTP 설정 활성화"
cat << EOF >> "${RESULT}"
양호 : FTP 서비스 미사용 또는 Anonymous 설정 비활성화
취약 : Anonymous FTP 설정 활성화
EOF
BAR

if ! pgrep -f ftp; then
  NO_RUN_MSG "FTP"
else
  FILE="/etc/passwd"
  for user in "ftp" "anonymous"; do
    if grep -q "$user" "$FILE"; then
      userdel "$user"
    fi
  done

  # ProFTP
  FILE="/etc/proftp/proftpd.conf"
  if [ -f "$FILE" ]; then
    if grep -q "Anonymous" $FILE; then
      awk '/<Anonymous/{flag=1; next} /<\/Anonymous>/{flag=0} !flag' $FILE > tmpfile && mv tmpfile $FILE && rm -f tmpfile
      FIX_MSG $FILE
    else
      OPT_FIN_SKIP_FIX_MSG $FILE
    fi
  else
    NO_FILE_SKIP_MSG $FILE
  fi
fi

echo "===== SRV-013 Finish ====="
SPACE
}

# ********************************************* #
# SRV-014. NFS 접근통제 미비
# SRV-015 취약점 처리 제외
SRV-014(){
BAR
CODE "[SRV-014] NFS 접근통제 미비"
cat << EOF >> "${RESULT}"
양호 : NFS 비활성화 혹은 적절한 접근 통제가 이루어지고 있을 경우
취약 : 아래 조건 만족 시 취약
  1. NFS 서비스 실행 중
  2. NFS 설정 파일 내에 읽기/쓰기 권한 정의 등의 적절한 접근 통제 설정이 없을 경우
  3. NFS 설정 파일의 접근 권한이 소유자가 root가 아니고, 권한이 644보다 높게 부여된 경우
EOF
BAR

# 1. NFS 프로세스 확인
# 2. 설정 파일 존재 여부 확인
# 3. 파일 권한 확인
# 4. 내용 확인
if ! pgrep -f rpc.stat; then # NFS 프로세스 확인
  NO_RUN_MSG "NFS"
else
  kill -9 "$(pgrep -f rpc.stat)" # rpc.statd가 포함된 nfs를 사용하지 않으므로 해당 프로세스 종료

  FILE="/etc/exports"
  if [ -f "$FILE" ]; then # 설정 파일 확인
    PERM=$(stat -c "%a" "$FILE")
    if (( PERM > 640 )); then # 파일 권한 확인
      chmod 640 "$FILE"
      SET "$FILE 권한을 640로 조치 완료"
    fi

    NFS_PATH=$(showmount -e "$(hostname -I)" 2>/dev/null | awk 'NR > 1 {print $1}')
    if [ -z "$NFS_PATH" ]; then
      OPT_FIN_SKIP_FIX_MSG $FILE
    else
      echo "$NFS_PATH $(hostname -f) (root_squash)" >> "$FILE"
      FIX_MSG $FILE
    fi
  else
    FILE=$(find /etc -type f -name 'export')
    if [ -n "$FILE" ]; then # 다른 경로로 파일 존재 여부 확인
      PERM=$(stat -c "%a" "$FILE")
      if (( PERM > 640 )); then
        chmod 640 "$FILE"
        SET "$FILE 권한을 640로 조치 완료"
      fi

      NFS_PATH=$(showmount -e "$(hostname -I)" 2>/dev/null | awk 'NR > 1 {print $1}')
      if [ -z "$NFS_PATH" ]; then
        NO_RUN_MSG "$FILE"
      else
        echo "$NFS_PATH $(hostname -f) (root_squash)" >> "$FILE"
        FIX_MSG "$FILE"
      fi
    else
      NO_FILE_SKIP_MSG "$FILE"
    fi # 다른 경로의 파일 확인
  fi # 파일 존재 여부 확인
fi # 프로세스 확인

echo "===== SRV-014 Finish ====="
SPACE
}

# ********************************************* #
# SRV-026. root 계정 원격 접속 제한 미비
SRV-026(){
BAR
CODE "[SRV-026] root 계정 원격 접속 제한 미비"
cat << EOF >> "${RESULT}"
양호 : root 계정의 원격 접속이 허용되지 않은 경우
취약 :
  1. Telnet 사용 시: /etc/securetty 파일이 존재하지 않거나 파일 내에 pts/0 ~ pts/x 등 가상 터미널이 허용된 경우
  2. SSH 사용 시: /etc/ssh/sshd_config 파일에 PermitRootLogin yes로 설정되어 있을 경우
EOF
BAR

FILE="/etc/ssh/sshd_config"
result=1
if grep -Eq "^PermitRootLogin yes" $FILE; then
  sed -i 's/^PermitRootLogin yes/PermitRootLogin no/' $FILE
  FIX_MSG $FILE
  result=0
elif grep -Eq "^#PermitRootLogin (no|yes)" $FILE; then
  sed -i -E 's/^#PermitRootLogin (no|yes)/PermitRootLogin no/' $FILE
  FIX_MSG $FILE
  result=0
else
  OPT_FIN_SKIP_FIX_MSG $FILE
fi

if [ $result -eq 0 ]; then
  sudo service sshd restart > /dev/null 2>&1
fi

echo "===== SRV-026 Finish ====="
SPACE
}

# ********************************************* #
# SRV-027. 서비스 접근 IP 및 포트 제한 미비
SRV-027(){
BAR
CODE "[SRV-027] 서비스 접근 IP 및 포트 제한 미비"
cat << EOF >> "${RESULT}"
양호 : 시스템 서비스로의 접근 통제가 적절하게 수행되고 있을 경우(방화벽, tcp-wrapper, 3rd-party 제품 등을 활용)
취약 : 시스템 서비스로의 접근 통제가 적절하게 수행되고 있지 않을 경우
EOF
BAR

# 1. 파일 존재 여부 확인
# 2. 파일 내용 확인
# 3. SSHD 재기동
# TCP Wrapper 서비스만 확인
result=1 # 1 : 수정 없음 / 0 : 수정 있음
FILE="/etc/hosts.deny"
if [ ! -f "$FILE" ]; then
  echo "ALL:ALL" >> $FILE
  FIX_MSG $FILE
  result=0
else
  if ! grep -Eq "^ALL:ALL" $FILE; then
    echo "ALL:ALL" >> $FILE
    FIX_MSG $FILE
    result=0
  else
    OPT_FIN_SKIP_FIX_MSG $FILE
  fi
fi

# 10.0.0.0/16 : Test VPC CIDR
# 172.16.1.0/24 : SSL VPN Test VPC
FILE="/etc/hosts.allow"
if [ ! -f "$FILE" ]; then
  echo "sshd:10.0.0.0/255.255.0.0 , 172.16.1.0/255.255.255.0" >> $FILE
  echo "ALL:localhost" >> $FILE
  FIX_MSG $FILE
  result=0
else
  if ! grep -Eq "^sshd:10.0.0.0/255.255.0.0 , 172.16.1.0/255.255.255.0" $FILE; then
    echo "sshd:10.0.0.0/255.255.0.0 , 172.16.1.0/255.255.255.0" >> $FILE
    echo "ALL:localhost" >> $FILE
    FIX_MSG $FILE
    result=0
  else
    OPT_FIN_SKIP_FIX_MSG $FILE
  fi
fi

if [ $result -eq 0 ]; then
  # 수정이 발생한 경우 재기동
  service sshd restart > /dev/null 2>&1
fi

echo "===== SRV-027 Finish ====="
SPACE
}

# ********************************************* #
# SRV-028. 원격 터미널 접속 타임아웃 미설정
SRV-028(){
BAR
CODE "[SRV-028] 원격 터미널 접속 타임아웃 미설정"
cat << EOF >> "${RESULT}"
양호 : 세션 타임아웃 값이 900초 이하(15분)로 설정 되어 있을 경우
취약 : 세션 타임아웃 값이 900초 이하(15분)로 설정 되어 있지 않을 경우
EOF
BAR

# 1. 설정 파일 확인
# 2. 파일 내용 확안
FILE="/etc/profile"
if ! grep -Eq "^\s*(export\s+)?TMOUT" $FILE; then
  cp $FILE $FILE.bak
  echo "export TMOUT=800" >> $FILE
  FIX_MSG $FILE
else
  TMOUT_VALUE="$(grep -E "^\s*(export\s+)?TMOUT" $FILE | cut -d'=' -f2 | tr -d ' ')"
  # export 문자열 제거
  TMOUT_VALUE="${TMOUT_VALUE#export}"
  if (( TMOUT_VALUE > 900 )); then
    cp $FILE $FILE.bak
    sed -i '/^\s*\(export\s\+\)\?TMOUT=/c\export TMOUT=800' $FILE
    FIX_MSG "$FILE"
  else
    OPT_FIN_SKIP_FIX_MSG "$FILE"
  fi
fi

echo "===== SRV-028 Finish ====="
SPACE
}

# ********************************************* #
# SRV-069. 비밀번호 관리정책 설정 미비
SRV-069(){
BAR
CODE "[SRV-069] 비밀번호 관리정책 미비"
cat << EOF >> "${RESULT}"
양호 : 비밀번호 관련 정책들이 설정되어 있을 경우
취약 : 비밀번호 관련 정책들이 설정되어 있지 않을 경우
EOF
BAR

# Ubuntu 20.04
if grep  ^NAME /etc/os-release | grep -q Ubuntu; then
  FILE="/etc/pam.d/common-password"
  TARGET="password        requisite                       pam_cracklib.so retry=3 minlen=10 dcredit=-1 ucredit=-1 lcredit=-1 ocredit=-1 difok=3"
  if ! grep  "pam_cracklib.so" $FILE | grep  retry | grep  minlen | grep  dcredit | grep  ucredit | grep  lcredit | grep -q ocredit; then
    cp $FILE $FILE.bak
    sed -i "/password.*requisite.*pam_cracklib.so/c\\$TARGET" $FILE
    FIX_MSG $FILE
  else
    OPT_FIN_SKIP_FIX_MSG $FILE
  fi

  FILE="/etc/login.defs"
  MAX_DAY="$(grep ^PASS_MAX_DAYS $FILE | awk '{print $2}')"
  if (( "$MAX_DAY" > 90 )); then
    cp $FILE $FILE.bak
    sed -i 's/^PASS_MAX_DAYS.*/PASS_MAX_DAYS   90/' /etc/login.defs
    FIX_MSG $FILE
  else
    OPT_FIN_SKIP_FIX_MSG $FILE
  fi

# CentOS7.8
elif grep  ^NAME /etc/os-release | grep -q CentOS; then
  FILE="/etc/security/pwquality.conf"

  declare -A OPTIONS
  OPTIONS["minlen"]="10"
  OPTIONS["dcredit"]="-1"
  OPTIONS["ucredit"]="-1"
  OPTIONS["lcredit"]="-1"
  OPTIONS["ocredit"]="-1"

  cp $FILE $FILE.bak

  result=1 # 파일 수정이 있을 경우 : 0, 파일 수정이 없을 경우 : 1

  for key in "${!OPTIONS[@]}"; do
    if grep -q "$key" $FILE; then
      if ! grep -qE "^$key" $FILE; then
        sed -i.bak "s/^#\?\s*$key.*/$key=${OPTIONS[$key]}/" "$FILE"
        FIX_MSG $FILE
        result=0
      elif [ "$(grep -E "^$key" $FILE | awk -F= '{print $2}')" != ${OPTIONS[$key]} ]; then
        sed -i.bak "s/^#\?\s*$key.*/$key=${OPTIONS[$key]}/" "$FILE"
        FIX_MSG $FILE
        result=0
      fi
    else
      echo "$key=${OPTIONS[$key]}" >> "$FILE"
      FIX_MSG $FILE
      result=0
    fi
  done

  if [ $result -eq 1 ]; then
    OPT_FIN_SKIP_FIX_MSG $FILE
  elif [ $result -eq 0 ]; then
    service sshd restart > /dev/null 2>&1
  fi
fi

echo "===== SRV-069 Finish ====="
SPACE
}


# ********************************************* #
# SRV-074. 불필요하거나 관리되지 않는 계정 존재
SRV-074(){
BAR
CODE "[SRV-074] 불필요하거나 관리되지 않는 계정 존재"
cat << EOF >> "${RESULT}"
양호 : 분기별 1회 이상 로그인 한 기록이 있고, 비밀번호를 변경하고 있는 경우
취약 : 분기별 1회 이상 로그인 한 기록이 없거나, 비밀번호를 변경하지 않은 경우
EOF
BAR

# nbpmon은 네이버 클라우드 모니터링을 위한 메트릭 수집 agent
if ! getent passwd nbpmon | grep -q nologin; then
  usermod -s /usr/sbin/nologin nbpmon
  SET "nbpmon의 command shell을 nologin으로 변경했습니다."
fi

# /etc/passwd 중 login shell이 아닌 사용자 추출
getent passwd | awk -F: '$7 !~ /nologin|false/ && $1 !~ /nbpmon/ {print $1}' | while read -r user; do
    # locale 설정 시 문제가 있을 경우를 대비
    last_login="$(LC_ALL=en_US.UTF-8 lastlog -u "$user" | tail -n 1)"
    if echo "$last_login" | grep -qE "Never logged in|*로그인한 적이 없습니다*"; then
      WARN "$user 계정의 최초 로그인 이력이 없습니다."
    else
      # awk '{print $(NF-4), $(NF-3), $(NF-2), $(NF-0)}' 역 순으로 조회
      last_login="$(LC_ALL=en_US.UTF-8 lastlog -u "$user" | tail -n 1 | awk '{print $(NF-4), $(NF-3), $(NF-2), $(NF-0)}')"
      last_login_sec="$(date -d "$last_login" +%s)"
      last_90_days_sec="$(date -d "90 days ago" +%s)"
      if [ "$last_login_sec" -le "$last_90_days_sec" ]; then
        WARN "$user 계정의 마지막 로그인이 90일이 지났습니다."
      else
        OK "$user 계정의 취약점 진단 이상 없음"
      fi
    fi
done

echo "===== SRV-074 Finish ====="
SPACE
}


# ********************************************* #
# SRV-087. C 컴파일러 존재 및 권한 설정 미흡
SRV-087(){
BAR
CODE "[SRV-087] C 컴파일러 존재 및 권한 설정 미흡"
cat << EOF >> "${RESULT}"
양호 : 컴파일러가 없거나 others 실행 권한이 없을 시
취약 : 컴파일러에 others 실행 권한이 존재할 시
EOF
BAR

# 1. 파일 여부 확인
while IFS= read -r file; do
  perm=$(stat -c "%a" "$file")
  if [ "$perm" -gt 740 ]; then
    chmod 740 "$file"
    FIX_MSG "$file"
  else
    OPT_FIN_SKIP_FIX_MSG "$file"
  fi
done < <(find /etc /usr -type f \( -name 'gcc' -o -name 'cc' \))

#if [[ -n "$COMMAND" ]]; then
#  find /etc /usr -type f \( -name 'gcc' -o -name 'cc' \) -exec chmod 640 {} \;
#  FIX_MSG "gcc 또는 cc"
#else
#  NO_FILE_SKIP_MSG "gcc 또는 cc"
#fi

echo "===== SRV-087 Finish ====="
SPACE
}

# ********************************************* #
# SRV-096. 사용자 환경 파일의 소유자 또는 권한 설정 미흡
SRV-096(){
BAR
CODE "[SRV-096] 사용자 환경 파일의 소유자 권한 설정 미흡"
cat << EOF >> "${RESULT}"
양호 : 사용자 환경 파일에 others에 부여된 권한이 없을 경우
취약 : 사용자 환경 파일에 others에 읽기 혹은 쓰기 권한이 부여된 경우
EOF
BAR

# grep -Ev ':$' : 홈 디렉토리가 없는 사용자 제외
HOME_DIRS="$(grep -Ev 'nologin|false|^\s+?\#' /etc/passwd| awk -F':' '{print $1":"$6}' | grep -Ev ':$' | sort -u)"
USER_ENV_FILES=".profile .bash_profile .bashrc .bash_login .cshrc .kshrc .login .exrc .netrc .history .sh_history .bash_history .dtprofile"
for USER_DIR in $HOME_DIRS
do
  HOME_DIR="$(echo "$USER_DIR" | awk -F':' '{print $2}')"
  for ENV_FILE in $USER_ENV_FILES
  do
    if [ -f "$HOME_DIR/$ENV_FILE" ]; then
      PERM="$(stat -c "%a" "$HOME_DIR/$ENV_FILE")"
      if (( PERM > 640 )); then
        chmod 640 "$HOME_DIR/$ENV_FILE"
        FIX_MSG "$HOME_DIR/$ENV_FILE"
      else
        OPT_FIN_SKIP_FIX_MSG "$HOME_DIR/$ENV_FILE"
      fi
    fi
  done
done

echo "===== SRV-096 Finish ====="
SPACE
}

# ********************************************* #
# SRV-108. 로그에 대한 접근통제 및 관리 미흡
SRV-108(){
BAR
CODE "[SRV-108] 로그에 대한 접근통제 및 관리 미흡"
cat << EOF >> "${RESULT}"
양호 : 디렉터리 내 로그 파일들의 권한이 644 이하일 때
취약 : 디렉터리 내 로그 파일들을 소유자 이외의 사용자가 수정 가능할 때
EOF
BAR

LOG_FILES="$(find /var/log -maxdepth 1 -type f -perm -644 | grep -E "log$")"
if [ -n "$LOG_FILES" ]; then
  while IFS= read -r FILE; do
    chmod 640 "$FILE"
    FIX_MSG "$FILE"
  done <<< "$LOG_FILES"
else
  NO_FILE_SKIP_MSG "권한이 높은 log"
fi

echo "===== SRV-108 Finish ====="
SPACE
}

# ********************************************* #
# SRV-109. 로그에 대한 접근통제 및 관리 미흡
# SRV-112와 통합
SRV-109(){
BAR
CODE "[SRV-109] 시스템 주요 이벤트 로그 설정 미흡"
cat << EOF >> "${RESULT}"
양호 :
  1. syslog 로그 정책이 내부 정책에 부합하게 설정되어 있는 경우
  2. syslog 설정에서 auth 또는 authpriv가 활성화 된 경우 (su 명령 로그)
취약 :
  1. syslog 로그 기록 정책이 내부 정책에 부합하게 설정되지 않은 경우
  2. syslog 설정에서 auth 또는 authpriv가 활성화 되지 않은 경우(su 명령 로그)
EOF
BAR

FILE="/etc/rsyslog.conf"
if [ ! -f $FILE ]; then
  FILE="/etc/syslog.conf"
fi

declare -A logList

logList["authpriv.*"]="/var/log/secure"
logList["cron.*"]="/var/log/cron"
logList["*.alert"]="/dev/console"

cp $FILE $FILE.bak

for key in "${!logList[@]}"; do
  if ! grep -qE $key $FILE; then
    echo -e "\n#===== Admin Setting Option =====" >> $FILE
  fi
done

for key in "${!logList[@]}"; do
  escapedKey=${key//\*/\\*}
  if ! grep -qE "^($escapedKey)" $FILE; then
    echo "$key ${logList[$key]}" >> $FILE
    SET "$key ${logList[$key]} 옵션을 ${FILE}에 추가"
  else
    OK "$key ${logList[$key]} 옵션이 ${FILE}에 포함되어 취약점 조치 제외"
  fi
done

# 데몬 프로세스나 백그라운드 작업을 재시작하지 않고 갱신
kill -HUP "$(pgrep -f syslogd)"

echo "===== SRV-109 Finish ====="
SPACE
}

# ********************************************* #
# SRV-122. UMASK 설정 미흡
SRV-122(){
BAR
CODE "[SRV-122] UMASK 설정 미흡"
cat << EOF >> "${RESULT}"
양호 : 모든 계정의 umask 값과 설정 파일등에 적용된 umask값이 022 이상인 경우
취약 : umask값이나 설정 파일 등에 적용된 umask값이 022 미만인 계정이 존재하는 경우
EOF
BAR

FILE="/etc/profile"
if ! grep -q umask $FILE; then
  echo "umask 022" >> $FILE
  FIX_MSG $FILE
else
  OPT_FIN_SKIP_FIX_MSG $FILE
fi

echo "===== SRV-122 Finish ====="
SPACE
}

# ********************************************* #
# SRV-127. 계정 잠금 임계값 설정 미비
SRV-127(){
BAR
CODE "[SRV-127] 계정 잠금 임계값 설정 미비"
cat << EOF >> "${RESULT}"
양호 : /etc/pam.d/password-auth 파일과 /etc/pam.d/system-auth 파일에 계정 잠금 임계값 설정이 존재하는 경우
취약 : /etc/pam.d/password-auth 파일과 /etc/pam.d/system-auth 파일에 계정 잠금 임계값 설정이 존재하지 않는 경우
EOF
BAR

# Ubuntu 20.04
if grep  ^NAME /etc/os-release | grep -q Ubuntu; then
  FILE="/etc/pam.d/common-auth"
  # pam_tally2.so 설정
  if ! grep  'pam_tally2.so' $FILE | grep 'deny' | grep -q 'unlock_time'; then
    cp $FILE $FILE.bak
    sed -i '/pam_deny.so/a auth\trequired\t\t\tpam_tally2.so deny=5 unlock_time=300 onerr=fail audit' $FILE
    FIX_MSG $FILE
  else
    OPT_FIN_SKIP_FIX_MSG $FILE
  fi

  FILE="/etc/pam.d/common-account"
  if ! grep  'account' $FILE | grep 'required' | grep -q 'pam_tally2.so' ; then
    cp $FILE $FILE.bak
    sed -i '/pam_deny.so/a account\trequired\t\t\tpam_tally2.so' $FILE
    FIX_MSG $FILE
  else
    OPT_FIN_SKIP_FIX_MSG $FILE
  fi

# CentOS7.8
elif grep  ^NAME /etc/os-release | grep -q CentOS; then
  FILE="/etc/pam.d/system-auth"
  if ! grep  'pam_tally2.so' $FILE | grep 'deny' | grep -q 'unlock_time'; then
    cp $FILE $FILE.bak
    sed -i '/auth        required      pam_env.so/a auth        required      pam_tally2.so deny=5 unlock_time=300' $FILE
    FIX_MSG $FILE
  else
    OPT_FIN_SKIP_FIX_MSG $FILE
  fi

  FILE="/etc/pam.d/password-auth"
  if ! grep 'account' $FILE | grep 'required' | grep 'pam_tally2.so' | grep 'deny' | grep -q 'unlock_time'; then
    cp $FILE $FILE.bak
    sed -i '/account     required      pam_unix.so/a account     required      pam_tally2.so deny=5 unlock_time=300' $FILE
    FIX_MSG $FILE
  else
    OPT_FIN_SKIP_FIX_MSG $FILE
  fi
fi

echo "===== SRV-127 Finish ====="
SPACE
}

# ********************************************* #
# SRV-131. SU 명령 사용가능 그룹 제한 미비
SRV-131(){
BAR
CODE "[SRV-131] SU 명령 사용가능 그룹 제한 미비"
cat << EOF >> "${RESULT}"
양호 : /etc/pam.d/su 파일에 auth required pam_wheel.so use_uid 라인이 존재하는 경우
취약 : /etc/pam.d/su 파일에 auth required pam_wheel.so use_uid 라인이 존재하지 않는 경우
EOF
BAR

# Wheel 그룹 추가
if ! grep -q wheel /etc/group; then
  groupadd wheel
  SET "wheel 그룹을 추가했습니다."
fi

# Wheel 유저 추가
if ! grep wheel /etc/group | grep -q "root"; then
  usermod -G wheel root
  usermod -G wheel "$USER_NAME"
  SET "wheel 그룹에 root, $USER_NAME 유저를 해당 그룹에 추가했습니다."
fi

# su 명령어 그룹 변경
FILES="/usr/bin/su /bin/su"
for FILE in $FILES; do
  if [ "$(stat -c "%G" "$FILE")" != "wheel" ]; then
    chgrp wheel "$FILE"
    SET "${FILE}의 group을 wheel로 변경했습니다."
  fi

  PERM=$(stat -c "%a" "$FILE")
  if (( PERM == 4750 )); then
    OPT_FIN_SKIP_FIX_MSG $FILE
  else
    if (( PERM > 750 )); then
      chmod 4750 "$FILE"
      SET "${FILE}의 권한을 4750으로 변경했습니다."
    fi
  fi
done

FILE="/etc/pam.d/su"

if ! grep -Eq '^auth.*required.*pam_wheel\.so.*debug group=wheel' "$FILE"; then
  if grep -Eq '^auth.*required.*pam_wheel\.so' "$FILE"; then
    sed -i.bak 's/^auth[[:space:]]\+required[[:space:]]\+pam_wheel\.so.*/auth\t\trequired\tpam_wheel.so debug group=wheel/' "$FILE"
    FIX_MSG "$FILE"
  else
    sed -i.bak '/auth[[:space:]]*sufficient[[:space:]]*pam_rootok\.so/a auth\t\trequired\tpam_wheel.so debug group=wheel' "$FILE"
    FIX_MSG "$FILE"
  fi
else
  # If the correct 'auth required pam_wheel.so' line with 'debug group=wheel' exists, skip the fix
  OPT_FIN_SKIP_FIX_MSG "$FILE"
fi

echo "===== SRV-131 Finish ====="
SPACE
}

# ********************************************* #
# SRV-133. Cron 서비스 사용 계정 제한 미비
SRV-133(){
BAR
CODE "[SRV-133] Cron 서비스 사용 계정 제한 미비"
cat << EOF >> "${RESULT}"
양호 :
  - cron.allow, cron.deny 파일 내부에 계정이 존재하는 경우
  - cron.allow, cron.deny 파일 둘 다 없는 경우(root만 cron 사용 가능)
취약 : cron.allow 파일이 없고, cron.deny 파일 내부에 계정이 없는 경우
EOF
BAR

COMMAND=$(find /etc/ -maxdepth 1 -type f \( -name "cron.deny" -o -name "cron.allow" \))

if [[ -n "$COMMAND" ]]; then
  for list in $COMMAND; do
    sudo rm -f "$list"
    SET "$list 을 삭제했습니다."
  done
else
  NO_FILE_SKIP_MSG "cron.allow 또는 cron.deny"
fi

echo "===== SRV-133 Finish ====="
SPACE
}

# ********************************************* #
# SRV-163. 시스템 사용 주의사항 미출력
SRV-163(){
BAR
CODE "[SRV-163] 시스템 사용 주의사항 미출력"
cat << EOF >> "${RESULT}"
양호 : /etc/issue.net, /etc/ssh/sshd_config, /etc/motd 파일 설정 등으로 시스템 사용 주의사항을 출력하는 경우
취약 : /etc/issue.net, /etc/ssh/sshd_config, /etc/motd 파일 설정 등으로 시스템 사용 주의사항 미출력 시 또는 표시 문구 내에 시스템 정보가 노출되는 경우
EOF
BAR

result=1 # 파일 수정이 있을 경우 : 0, 파일 수정이 없을 경우 : 1
FILE="/etc/ssh/sshd_config"
if grep -Eq "^Banner none" $FILE; then
  sed -i 's/^Banner none/Banner \/etc\/issue.net/' $FILE
  FIX_MSG $FILE
  result=0
elif grep -Eq "^#Banner.*$" $FILE; then
  sed -i 's/^#Banner.*$/Banner \/etc\/issue.net/' $FILE
  FIX_MSG $FILE
  result=0
else
  OPT_FIN_SKIP_FIX_MSG $FILE
fi

FILE="/etc/issue.net"
if [ ! -f $FILE ]; then
  echo "
  ############################## << WARNING >> ###############################

  본 시스템은 ${COMPANY_NAME}의 보안설비로 허가된 사용자만 이용할 수 있습니다.
  부당한 방법으로 전산망에 접속하거나 정보를 삭제/변경/유출하는 사용자는
  관련 법령에 따라 처벌 받게 됩니다.

  This system is a security facility of ${COMPANY_NAME} and can only be used
  by authorized users. Users who access the computer network or
  delete/change/leak information in an unreasonable way will be punished
  according to relevant laws and regulations.

  ############################################################################

  " > $FILE
  SET "${FILE}을 생성했습니다."
  result=0
else
  OPT_FIN_SKIP_FIX_MSG $FILE
fi

if [ $result -eq 0 ]; then
  sshd -t
  if [ $? -eq 0 ]; then
    sudo service sshd restart > /dev/null 2>&1
  else
    WARN "${FILE}의 설정이 잘못되었습니다."
  fi
fi

echo "===== SRV-163 Finish ====="
SPACE
}

# ********************************************* #
# [SRV-164] 구성원이 존재하지 않는 GID 존재
SRV-164(){
BAR
CODE "[SRV-164] 구성원이 존재하지 않는 GID 존재"
cat << EOF >> "${RESULT}"
양호 : 구성원이 존재하지 않는 GID가 존재하지 않는 경우
취약 : 구성원이 존재하지 않는 GID가 존재하는 경우

## 자사의 경우 tm_dsa만 미사용 Group으로 지정
## tm_dsa만 삭제
EOF
BAR

FILE=/etc/group
if grep -q tm_dsa $FILE; then
  find /etc /bin /usr /var /home /tmp -type f -group tm_dsa \
    -exec chown root.root {} \; \
    -exec bash -c "SET $0 파일의 권한을 root:root 로 변경했습니다." {} \;
  groupdel tm_dsa > /dev/null 2>&1
  SET "tm_dsa 그룹을 삭제했습니다."
else
  OK "tm_dsa 그룹이 없어 취약점 조치 제외"
fi

echo "===== SRV-164 Finish ====="
SPACE
}


DETAIL_INFO(){
  echo "
========== Vulnerability check Detail ==========
[SRV-001] SNMP Community 스트링 설정 미흡 -------------------
[PID: snmp]
$(
if pgrep -f snmp; then
  echo "PID: $(pgrep -f snmp)"
else
  echo "none"
fi
)

[SRV-004] 불필요한 SMTP 서비스 실행 -------------------
[PID : sendmail, master, exim4]
$(
if pgrep -f sendmail; then
  echo "PID: $(pgrep -f sendmail)"
else
  echo "none"
fi
)

$(
if pgrep -f master; then
  echo "PID: $(pgrep -f master)"
else
  echo "none"
fi
)

$(
if pgrep -f exim4; then
  echo "PID: $(pgrep -f exim4)"
else
  echo "none"
fi
)

[SRV-011] 시스템 관리자 계정의 FTP 사용 제한 미비 -------------------
[PID : ftp]
$(
if pgrep -f ftp; then
  echo "PID: $(pgrep -f ftp)"
else
  echo "none"
fi
)

[SRV-012] .netrc 파일 내 호스트 정보 노출 -------------------
[PID : ftp]
$(
if pgrep -f ftp; then
  echo "PID: $(pgrep -f ftp)"
else
  echo "none"
fi
)

[SRV-013] Anonymous FTP 설정 활성화 -------------------
[PID : ftp]
$(
if pgrep -f ftp; then
  echo "PID: $(pgrep -f ftp)"
else
  echo "none"
fi
)

[SRV-014] NFS 접근통제 미비 -------------------
[PID : rpc.stat]
$(
if pgrep -f rpc.stat; then
  echo "PID: $(pgrep -f rpc.stat)"
else
  echo "none"
fi
)

[SRV-026] root 계정 원격 접속 제한 미비 -------------------
[/etc/ssh/sshd_config]
$(grep -E "^PermitRootLogin" /etc/ssh/sshd_config)

[SRV-027] 서비스 접근 IP 및 포트 제한 미비 -------------------
[/etc/hosts.allow]
$(cat /etc/hosts.allow)

[/etc/hosts.deny]
$(cat /etc/hosts.deny)

[SRV-028] 원격 터미널 접속 타임아웃 미설정 -------------------
[/etc/profile]
$(grep TMOUT /etc/profile)

[SRV-069] 비밀번호 관리정책 미비 -------------------
$(
if grep  ^NAME /etc/os-release | grep -q Ubuntu; then
  echo "[/etc/pam.d/common-password]"
  grep "pam_cracklib.so" /etc/pam.d/common-password
elif grep  ^NAME /etc/os-release | grep -q CentOS; then
  echo "[CentOS : /etc/security/pwquality.conf]"
  grep -E "minlen|dcredit|ucredit|lcredit|ocredit" /etc/security/pwquality.conf
fi
)

[SRV-074] 불필요하거나 관리되지 않는 계정 존재 -------------------
[/etc/profile]
$(
getent passwd | awk -F: '$7 !~ /nologin|false/ && $1 !~ /nbpmon/ {print $1}' | while read -r user; do
    # locale 설정 시 문제가 있을 경우를 대비
    last_login="$(LC_ALL=en_US.UTF-8 lastlog -u "$user" | tail -n 1)"
    if echo "$last_login" | grep -qE "Never logged in|*로그인한 적이 없습니다*"; then
      echo "$user 계정의 최초 로그인 이력이 없습니다."
    else
      last_login="$(LC_ALL=en_US.UTF-8 lastlog -u "$user" | tail -n 1 | awk '{print $(NF-4), $(NF-3), $(NF-2), $(NF-0)}')"
      last_login_sec="$(date -d "$last_login" +%s)"
      last_90_days_sec="$(date -d "90 days ago" +%s)"
      if [ "$last_login_sec" -le "$last_90_days_sec" ]; then
        echo "$user 계정의 마지막 로그인이 90일이 지났습니다."
      else
        echo "$user 계정의 취약점 진단 이상 없음"
      fi
    fi
done
)

[SRV-087] C 컴파일러 존재 및 권한 설정 미흡 -------------------
[gcc 또는 cc 파일]
$(find /etc /usr -type f \( -name 'gcc' -o -name 'cc' \))

[SRV-096] 사용자 환경 파일의 소유자 권한 설정 미흡 -------------------
[사용자 환경 파일]
$(
HOME_DIRS="$(grep -Ev 'nologin|false|^\s+?\#' /etc/passwd| awk -F':' '{print $1":"$6}' | grep -Ev ':$' | sort -u)"
USER_ENV_FILES=".profile .bash_profile .bashrc .bash_login .cshrc .kshrc .login .exrc .netrc .history .sh_history .bash_history .dtprofile"
for USER_DIR in $HOME_DIRS
do
  HOME_DIR="$(echo "$USER_DIR" | awk -F':' '{print $2}')"
  for ENV_FILE in $USER_ENV_FILES
  do
    if [ -f "$HOME_DIR/$ENV_FILE" ]; then
      ls -l "$HOME_DIR/$ENV_FILE"
    fi
  done
done
)

[SRV-108] 로그에 대한 접근통제 및 관리 미흡 -------------------
[/var/log]
$(ls -al /var/log | grep -E "log$")

[SRV-109] 시스템 주요 이벤트 로그 설정 미흡 -------------------
[/etc/rsyslog.conf]
$(grep -E "authpriv|cron|alert" /etc/rsyslog.conf)

[SRV-122] UMASK 설정 미흡 -------------------
[/etc/profile]
$(grep umask /etc/profile)

[SRV-127] 계정 잠금 임계값 설정 미비 -------------------
$(
if grep  ^NAME /etc/os-release | grep -q Ubuntu; then
  echo "[/etc/pam.d/common-auth]"
  grep 'pam_tally2.so' /etc/pam.d/common-auth | grep 'deny' | grep 'unlock_time'

  echo "[/etc/pam.d/common-account]"
  grep  'account' /etc/pam.d/common-account | grep 'required' | grep 'pam_tally2.so'

elif grep  ^NAME /etc/os-release | grep -q CentOS; then
  echo "[/etc/pam.d/system-auth]"
  grep 'pam_tally2.so' /etc/pam.d/system-auth | grep 'deny' | grep  'unlock_time'

  echo "[/etc/pam.d/password-auth]"
  grep 'account' /etc/pam.d/password-auth | grep 'required' | grep 'pam_tally2.so' | grep 'deny' | grep 'unlock_time'
fi
)

[SRV-131] SU 명령 사용가능 그룹 제한 미비 -------------------
[/etc/group]
$(grep wheel /etc/group)

[/usr/bin/su]
$(ls -al /usr/bin/su)

[/etc/pam.d/su]
$(grep -E '^auth.*required.*pam_wheel\.so.*debug group=wheel' /etc/pam.d/su)

[SRV-133] Cron 서비스 사용 계정 제한 미비 -------------------
[/etc/cron*]
$(find /etc/ -maxdepth 1 -type f \( -name "cron.deny" -o -name "cron.allow" \))

[SRV-163] 시스템 사용 주의사항 미출력 -------------------
[/etc/ssh/sshd_config]
$(grep -E "^Banner|issue.net" /etc/ssh/sshd_config)

[/etc/issue.net]
$(cat /etc/issue.net)
" > /root/"$(hostname)""_detailed_info_""$(date +%F)".txt
}